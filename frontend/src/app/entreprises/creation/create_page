import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { ChevronLeft, Building, Briefcase, FileText, Users, MapPin, Link, Phone, Mail, Upload, HelpCircle, Calendar, ArrowRight, X, BarChart } from 'lucide-react';
import { createClient } from '@supabase/supabase-js';
import { useMutation } from '@tanstack/react-query';
import { toast } from 'sonner';

// Composants UI de Shadcn
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Progress } from '@/components/ui/progress';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';

// Initialisation du client Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_KEY || '';
const supabase = createClient(supabaseUrl, supabaseKey);

// Données statiques
const sectors = [
  "Industrie manufacturière",
  "Services aux entreprises",
  "Commerce de détail",
  "Technologie",
  "Finance et assurance",
  "Santé",
  "Construction / BTP",
  "Transport et logistique",
  "Agroalimentaire",
  "Énergie",
  "Formation professionnelle",
  "Autre"
];

const companySizes = [
  "TPE (< 10 salariés)",
  "PME (10-250 salariés)",
  "ETI (250-5000 salariés)",
  "Grande entreprise (> 5000 salariés)"
];

const legalForms = [
  "SARL - Société à responsabilité limitée",
  "SAS - Société par actions simplifiée",
  "SA - Société anonyme",
  "EI - Entreprise individuelle",
  "EURL - Entreprise unipersonnelle à responsabilité limitée",
  "SNC - Société en nom collectif",
  "SCI - Société civile immobilière",
  "Association loi 1901",
  "Autre"
];

const profitabilityOptions = [
  "Très rentable (> 15% de marge nette)",
  "Rentable (entre 8% et 15% de marge nette)",
  "Moyennement rentable (entre 3% et 8% de marge nette)",
  "Peu rentable (entre 0% et 3% de marge nette)",
  "Déficitaire (marge nette négative)"
];

// Interface pour les données du formulaire
interface ContactPerson {
  name: string;
  role: string;
  email: string;
  phone: string;
}

interface Document {
  name: string;
  path: string;
  size?: number;
  type?: string;
}

interface CompanyFormData {
  // Informations générales
  name: string;
  legalForm: string;
  siren: string;
  creationDate: string;
  sector: string;
  size: string;
  description: string;
  
  // Contacts et localisation
  address: string;
  postalCode: string;
  city: string;
  country: string;
  website: string;
  phone: string;
  email: string;
  
  // Présentation détaillée
  history: string;
  mainProducts: string;
  vision: string;
  mission: string;
  values: string;
  
  // Contacts clés
  keyContacts: ContactPerson[];
  
  // Données financières
  turnover: string;
  turnoverYear: number;
  employees: string;
  profitability: string;
  
  // Logo et fichiers
  logo: string | null;
  documents: Document[];
}

// Composant principal
const CreateCompanyPage: React.FC = () => {
  const router = useRouter();
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState<CompanyFormData>({
    // Initialisation avec les valeurs par défaut
    name: '',
    legalForm: '',
    siren: '',
    creationDate: '',
    sector: '',
    size: '',
    description: '',
    
    address: '',
    postalCode: '',
    city: '',
    country: 'France',
    website: '',
    phone: '',
    email: '',
    
    history: '',
    mainProducts: '',
    vision: '',
    mission: '',
    values: '',
    
    keyContacts: [
      { name: '', role: '', email: '', phone: '' }
    ],
    
    turnover: '',
    turnoverYear: new Date().getFullYear() - 1,
    employees: '',
    profitability: '',
    
    logo: null,
    documents: []
  });
  
  // Gestion des fichiers temporaires pour la prévisualisation
  const [tempLogo, setTempLogo] = useState<File | null>(null);
  const [isUploading, setIsUploading] = useState(false);

  // Mutation React Query pour la création d'entreprise
  const createCompanyMutation = useMutation({
    mutationFn: async (data: CompanyFormData) => {
      // Création de l'entreprise dans Supabase
      const { data: company, error } = await supabase
        .from('companies')
        .insert([data])
        .select()
        .single();
      
      if (error) throw error;
      
      // Vectorisation des données pour l'analyse IA via AWS Bedrock
      try {
        // Préparation des données pour l'IA
        const aiData = {
          companyId: company.id,
          content: `
            Nom: ${data.name}
            Secteur: ${data.sector}
            Taille: ${data.size}
            Description: ${data.description}
            Vision: ${data.vision}
            Mission: ${data.mission}
            Valeurs: ${data.values}
            Histoire: ${data.history}
          `,
          type: 'company_profile'
        };
        
        // Appel à l'API Backend pour traitement IA
        const aiResponse = await fetch('/api/vector-embedding', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(aiData)
        });
        
        if (!aiResponse.ok) {
          console.error('Vectorisation IA échouée');
        }
      } catch (aiError) {
        console.error('Erreur lors de la vectorisation:', aiError);
        // Non bloquant pour l'utilisateur
      }
      
      return company;
    },
    onSuccess: (data) => {
      toast.success('Entreprise créée avec succès');
      router.push(`/entreprises/${data.id}`);
    },
    onError: (error) => {
      toast.error('Erreur lors de la création de l\'entreprise');
      console.error('Erreur création:', error);
    }
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };
  
  const handleSelectChange = (name: string, value: string) => {
    setFormData({ ...formData, [name]: value });
  };
  
  const handleKeyContactChange = (index: number, field: keyof ContactPerson, value: string) => {
    const updatedContacts = [...formData.keyContacts];
    updatedContacts[index] = { ...updatedContacts[index], [field]: value };
    setFormData({ ...formData, keyContacts: updatedContacts });
  };
  
  const addKeyContact = () => {
    setFormData({
      ...formData,
      keyContacts: [...formData.keyContacts, { name: '', role: '', email: '', phone: '' }]
    });
  };
  
  const removeKeyContact = (index: number) => {
    const updatedContacts = [...formData.keyContacts];
    updatedContacts.splice(index, 1);
    setFormData({ ...formData, keyContacts: updatedContacts });
  };

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>, field: 'logo' | 'documents') => {
    if (e.target.files && e.target.files.length > 0) {
      if (field === 'logo') {
        const file = e.target.files[0];
        setTempLogo(file);
        
        // Upload à Supabase
        setIsUploading(true);
        try {
          const fileExt = file.name.split('.').pop();
          const fileName = `${Date.now()}.${fileExt}`;
          const filePath = `logos/${fileName}`;
          
          const { data, error } = await supabase.storage
            .from('company-files')
            .upload(filePath, file);
            
          if (error) {
            throw error;
          }
          
          // Récupérer l'URL publique du fichier
          const { data: publicUrl } = supabase.storage
            .from('company-files')
            .getPublicUrl(filePath);
            
          setFormData({ ...formData, logo: publicUrl.publicUrl });
          toast.success('Logo téléchargé avec succès');
        } catch (error) {
          console.error('Erreur upload logo:', error);
          toast.error('Erreur lors du téléchargement du logo');
        } finally {
          setIsUploading(false);
        }
      } else if (field === 'documents') {
        // Gestion de plusieurs documents
        const newDocuments: Document[] = [...formData.documents];
        setIsUploading(true);
        
        for (const file of Array.from(e.target.files)) {
          try {
            const fileExt = file.name.split('.').pop();
            const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 7)}.${fileExt}`;
            const filePath = `documents/${fileName}`;
            
            const { data, error } = await supabase.storage
              .from('company-files')
              .upload(filePath, file);
              
            if (error) {
              throw error;
            }
            
            // Récupérer l'URL publique du fichier
            const { data: publicUrl } = supabase.storage
              .from('company-files')
              .getPublicUrl(filePath);
              
            newDocuments.push({
              name: file.name,
              path: publicUrl.publicUrl,
              size: file.size,
              type: file.type
            });
          } catch (error) {
            console.error('Erreur upload document:', error);
            toast.error(`Erreur lors du téléchargement de ${file.name}`);
          }
        }
        
        setFormData({ ...formData, documents: newDocuments });
        setIsUploading(false);
        toast.success('Documents téléchargés avec succès');
      }
    }
  };
  
  const removeDocument = async (index: number) => {
    try {
      const docToRemove = formData.documents[index];
      
      // Extraire le chemin du stockage à partir de l'URL
      const storagePath = docToRemove.path.split('/').slice(-2).join('/');
      
      // Supprimer de Supabase Storage
      const { error } = await supabase.storage
        .from('company-files')
        .remove([storagePath]);
        
      if (error) {
        throw error;
      }
      
      // Mettre à jour l'état local
      const updatedDocuments = [...formData.documents];
      updatedDocuments.splice(index, 1);
      setFormData({ ...formData, documents: updatedDocuments });
      
      toast.success('Document supprimé');
    } catch (error) {
      console.error('Erreur suppression document:', error);
      toast.error('Erreur lors de la suppression du document');
    }
  };

  const handleNextStep = () => {
    if (isStepValid()) {
      setStep(step + 1);
      window.scrollTo(0, 0);
    } else {
      toast.error('Veuillez compléter tous les champs obligatoires');
    }
  };

  const handlePreviousStep = () => {
    setStep(step - 1);
    window.scrollTo(0, 0);
  };

  const handleSubmit = async () => {
    // Vérification finale des données
    if (!isStepValid()) {
      toast.error('Veuillez vérifier les informations saisies');
      return;
    }
    
    // Lancement de la mutation
    createCompanyMutation.mutate(formData);
  };

  const isStepValid = () => {
    switch (step) {
      case 1:
        return Boolean(formData.name && formData.sector && formData.size);
      case 2:
        return Boolean(formData.address && formData.city && formData.postalCode);
      case 3:
        return true; // Informations optionnelles
      case 4:
        return formData.keyContacts.length > 0 && Boolean(formData.keyContacts[0].name);
      case 5:
        return true; // Informations financières optionnelles à ce stade
      default:
        return true;
    }
  };

  const getProgressPercentage = () => {
    return ((step - 1) / 4) * 100;
  };

  return (
    <div className="min-h-screen bg-slate-50 flex flex-col">
      {/* Header */}
      <header className="bg-white border-b border-slate-200 shadow-sm py-4">
        <div className="container mx-auto px-6 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="font-serif text-2xl text-blue-900 font-bold">Diabolo IA</div>
            <div className="text-slate-400 text-sm">|</div>
            <div className="text-slate-500 text-sm">CPA France</div>
          </div>
          <div className="h-8 w-8 rounded-full bg-blue-600 text-white flex items-center justify-center font-medium">
            E
          </div>
        </div>
      </header>
      
      {/* Main Content */}
      <main className="flex-1 container mx-auto px-6 py-10 max-w-4xl">
        {/* Back Button */}
        <Button 
          variant="ghost" 
          className="flex items-center text-slate-600 hover:text-slate-900 transition-colors mb-8"
          onClick={() => router.back()}
        >
          <ChevronLeft className="h-4 w-4 mr-1" />
          Retour
        </Button>
        
        {/* Page Title */}
        <div className="mb-10">
          <h1 className="text-3xl font-light text-slate-800 mb-2">
            Création d'une nouvelle entreprise
          </h1>
          <p className="text-slate-500">
            Enregistrez les informations de l'entreprise pour enrichir votre analyse stratégique
          </p>
        </div>
        
        {/* Progress Steps */}
        <div className="mb-10">
          <div className="flex items-center justify-between">
            {[1, 2, 3, 4, 5].map((s) => (
              <div key={s} className="flex flex-col items-center">
                <div 
                  className={`h-10 w-10 rounded-full flex items-center justify-center text-sm font-medium ${
                    s < step ? 'bg-blue-600 text-white' : 
                    s === step ? 'bg-white border-2 border-blue-600 text-blue-600' : 
                    'bg-white border border-slate-300 text-slate-400'
                  }`}
                >
                  {s < step ? '✓' : s}
                </div>
                <div className={`mt-2 text-sm ${s === step ? 'text-blue-600 font-medium' : 'text-slate-500'}`}>
                  {s === 1 ? "Informations" : 
                   s === 2 ? "Localisation" : 
                   s === 3 ? "Présentation" :
                   s === 4 ? "Contacts" :
                   "Finances"}
                </div>
              </div>
            ))}
          </div>
          <div className="relative mt-4">
            <Progress value={getProgressPercentage()} className="h-1" />
          </div>
        </div>
        
        {/* Form */}
        <Card className="border-slate-200 shadow-sm">
          <CardContent className="p-8">
            <div className="space-y-6">
              {/* Step 1: Basic Information */}
              {step === 1 && (
                <div className="space-y-6">
                  <h2 className="text-xl text-slate-800 font-medium mb-6 flex items-center">
                    <Building className="h-5 w-5 mr-2 text-blue-600" />
                    Informations générales
                  </h2>
                  
                  <div className="space-y-2">
                    <Label htmlFor="name" className="text-sm font-medium text-slate-700">
                      Nom de l'entreprise *
                    </Label>
                    <Input
                      id="mainProducts"
                      name="mainProducts"
                      value={formData.mainProducts}
                      onChange={handleInputChange}
                      placeholder="Description des produits ou services principaux, parts relatives dans le CA..."
                      className="w-full h-24"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="vision" className="text-sm font-medium text-slate-700">
                      Vision de l'entreprise
                    </Label>
                    <Textarea
                      id="vision"
                      name="vision"
                      value={formData.vision}
                      onChange={handleInputChange}
                      placeholder="Perspective à long terme, ambition de l'entreprise..."
                      className="w-full h-20"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="mission" className="text-sm font-medium text-slate-700">
                      Mission de l'entreprise
                    </Label>
                    <Textarea
                      id="mission"
                      name="mission"
                      value={formData.mission}
                      onChange={handleInputChange}
                      placeholder="Raison d'être, contribution à la société..."
                      className="w-full h-20"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="values" className="text-sm font-medium text-slate-700">
                      Valeurs de l'entreprise
                    </Label>
                    <Textarea
                      id="values"
                      name="values"
                      value={formData.values}
                      onChange={handleInputChange}
                      placeholder="Principes fondamentaux qui guident les actions de l'entreprise..."
                      className="w-full h-20"
                    />
                  </div>
                  
                  <div className="pt-2 space-y-2">
                    <Label className="text-sm font-medium text-slate-700">
                      Documents complémentaires
                    </Label>
                    <p className="text-xs text-slate-500 mb-2">
                      Ajoutez des plaquettes commerciales, rapports annuels, organigrammes, etc.
                    </p>
                    
                    <div className="space-y-3">
                      {formData.documents.length > 0 && (
                        <div className="space-y-2">
                          {formData.documents.map((doc, index) => (
                            <div key={index} className="flex items-center justify-between p-3 bg-slate-50 rounded-lg border border-slate-200">
                              <div className="flex items-center">
                                <FileText className="h-5 w-5 text-slate-400 mr-2" />
                                <span className="text-sm text-slate-700 truncate max-w-xs">{doc.name}</span>
                              </div>
                              <Button
                                variant="ghost" 
                                size="sm"
                                onClick={() => removeDocument(index)}
                                className="text-red-500 hover:text-red-700"
                              >
                                <X className="h-4 w-4" />
                              </Button>
                            </div>
                          ))}
                        </div>
                      )}
                      
                      <Label 
                        htmlFor="documents-upload" 
                        className="flex flex-col items-center justify-center h-24 w-full rounded-lg border-2 border-dashed border-slate-300 cursor-pointer hover:bg-slate-50 transition-colors"
                      >
                        <div className="flex flex-col items-center justify-center pt-5 pb-6">
                          <Upload className="h-8 w-8 text-slate-400 mb-2" />
                          <p className="text-sm text-slate-500">Cliquez pour ajouter des documents</p>
                          <p className="text-xs text-slate-400">PDF, Word, Excel, PowerPoint, PNG, JPG</p>
                        </div>
                        <input 
                          id="documents-upload"
                          type="file" 
                          className="hidden" 
                          multiple
                          onChange={(e) => handleFileUpload(e, 'documents')}
                          disabled={isUploading}
                        />
                      </Label>
                    </div>
                  </div>
                </div>
              )}
              
              {/* Step 4: Key Contacts */}
              {step === 4 && (
                <div className="space-y-6">
                  <h2 className="text-xl text-slate-800 font-medium mb-6 flex items-center">
                    <Users className="h-5 w-5 mr-2 text-blue-600" />
                    Contacts clés
                  </h2>
                  
                  <p className="text-slate-600 text-sm">
                    Identifiez les personnes essentielles de l'entreprise pour faciliter vos interactions futures et enrichir l'analyse des Ressources dans la méthode Diabolo.
                  </p>
                  
                  {formData.keyContacts.map((contact, index) => (
                    <Card key={index} className="border-slate-200">
                      <CardContent className="p-4 space-y-4">
                        <div className="flex justify-between items-center">
                          <h3 className="font-medium text-slate-800">Contact {index + 1}</h3>
                          {formData.keyContacts.length > 1 && (
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => removeKeyContact(index)}
                              className="text-red-500 hover:text-red-700 text-sm flex items-center"
                            >
                              <X className="h-4 w-4 mr-1" />
                              Supprimer
                            </Button>
                          )}
                        </div>
                        
                        <div className="grid grid-cols-2 gap-4">
                          <div className="space-y-2">
                            <Label htmlFor={`contact-name-${index}`} className="text-sm font-medium text-slate-700">
                              Nom et prénom *
                            </Label>
                            <Input
                              id={`contact-name-${index}`}
                              value={contact.name}
                              onChange={(e) => handleKeyContactChange(index, 'name', e.target.value)}
                              placeholder="Ex: Jean Dupont"
                              className="w-full"
                            />
                          </div>
                          
                          <div className="space-y-2">
                            <Label htmlFor={`contact-role-${index}`} className="text-sm font-medium text-slate-700">
                              Fonction
                            </Label>
                            <Input
                              id={`contact-role-${index}`}
                              value={contact.role}
                              onChange={(e) => handleKeyContactChange(index, 'role', e.target.value)}
                              placeholder="Ex: Directeur Général, Responsable Commercial"
                              className="w-full"
                            />
                          </div>
                        </div>
                        
                        <div className="grid grid-cols-2 gap-4">
                          <div className="space-y-2">
                            <Label htmlFor={`contact-email-${index}`} className="text-sm font-medium text-slate-700">
                              Email
                            </Label>
                            <div className="relative">
                              <Input
                                id={`contact-email-${index}`}
                                type="email"
                                value={contact.email}
                                onChange={(e) => handleKeyContactChange(index, 'email', e.target.value)}
                                placeholder="Ex: jean.dupont@entreprise.fr"
                                className="w-full pl-10"
                              />
                              <Mail className="absolute left-3 top-2.5 h-5 w-5 text-slate-400" />
                            </div>
                          </div>
                          
                          <div className="space-y-2">
                            <Label htmlFor={`contact-phone-${index}`} className="text-sm font-medium text-slate-700">
                              Téléphone
                            </Label>
                            <div className="relative">
                              <Input
                                id={`contact-phone-${index}`}
                                type="tel"
                                value={contact.phone}
                                onChange={(e) => handleKeyContactChange(index, 'phone', e.target.value)}
                                placeholder="Ex: +33 6 12 34 56 78"
                                className="w-full pl-10"
                              />
                              <Phone className="absolute left-3 top-2.5 h-5 w-5 text-slate-400" />
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                  
                  <Button
                    variant="outline"
                    onClick={addKeyContact}
                    className="w-full py-2 px-4 border-blue-300 text-blue-600 hover:bg-blue-50 flex items-center justify-center mt-4"
                  >
                    <Users className="h-4 w-4 mr-2" />
                    Ajouter un autre contact
                  </Button>
                </div>
              )}
              
              {/* Step 5: Financial Information */}
              {step === 5 && (
                <div className="space-y-6">
                  <h2 className="text-xl text-slate-800 font-medium mb-6 flex items-center">
                    <BarChart className="h-5 w-5 mr-2 text-blue-600" />
                    Données financières
                  </h2>
                  
                  <p className="text-slate-600 text-sm mb-4">
                    Ces informations permettent d'enrichir l'analyse des Ressources dans la méthode Diabolo et sont utilisées de façon confidentielle.
                  </p>
                  
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="turnover" className="text-sm font-medium text-slate-700">
                        Chiffre d'affaires (€)
                      </Label>
                      <Input
                        id="turnover"
                        name="turnover"
                        value={formData.turnover}
                        onChange={handleInputChange}
                        placeholder="Ex: 1500000"
                        className="w-full"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="turnoverYear" className="text-sm font-medium text-slate-700">
                        Année de référence
                      </Label>
                      <Input
                        id="turnoverYear"
                        type="number"
                        name="turnoverYear"
                        value={formData.turnoverYear}
                        onChange={handleInputChange}
                        min="2000"
                        max="2030"
                        className="w-full"
                      />
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="employees" className="text-sm font-medium text-slate-700">
                      Nombre d'employés
                    </Label>
                    <Input
                      id="employees"
                      type="number"
                      name="employees"
                      value={formData.employees}
                      onChange={handleInputChange}
                      placeholder="Ex: 42"
                      className="w-full"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="profitability" className="text-sm font-medium text-slate-700">
                      Niveau de rentabilité
                    </Label>
                    <Select 
                      value={formData.profitability}
                      onValueChange={(value) => handleSelectChange('profitability', value)}
                    >
                      <SelectTrigger className="w-full">
                        <SelectValue placeholder="Sélectionner un niveau" />
                      </SelectTrigger>
                      <SelectContent>
                        {profitabilityOptions.map(option => (
                          <SelectItem key={option} value={option}>{option}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <Alert className="bg-blue-50 border-blue-200 text-blue-800 mt-6">
                    <HelpCircle className="h-5 w-5 text-blue-500" />
                    <AlertDescription>
                      <div>
                        <p className="font-medium">Confidentialité des données</p>
                        <p className="text-sm text-blue-700 mt-1">
                          Ces informations financières sont utilisées uniquement pour l'analyse stratégique et ne sont partagées qu'avec les personnes autorisées dans le cadre de ce projet.
                        </p>
                      </div>
                    </AlertDescription>
                  </Alert>
                </div>
              )}
              
              {/* Navigation Buttons */}
              <div className="pt-8 flex justify-between">
                {step > 1 ? (
                  <Button
                    variant="outline"
                    onClick={handlePreviousStep}
                    className="px-5 py-2 border-slate-300 text-slate-700 hover:bg-slate-50 flex items-center"
                  >
                    <ChevronLeft className="h-4 w-4 mr-1" />
                    Précédent
                  </Button>
                ) : (
                  <div></div>
                )}
                
                {step < 5 ? (
                  <Button
                    onClick={handleNextStep}
                    disabled={!isStepValid() || isUploading}
                    className={`px-5 py-2 flex items-center ${
                      isUploading ? 'bg-blue-400 cursor-not-allowed' : 
                      !isStepValid() ? 'bg-blue-300 cursor-not-allowed' : 
                      'bg-blue-600 hover:bg-blue-700'
                    }`}
                  >
                    {isUploading ? 'Téléchargement...' : 'Suivant'}
                    <ArrowRight className="h-4 w-4 ml-1" />
                  </Button>
                ) : (
                  <Button
                    onClick={handleSubmit}
                    disabled={createCompanyMutation.isPending || isUploading}
                    className={`px-6 py-2 font-medium ${
                      createCompanyMutation.isPending || isUploading ? 
                      'bg-blue-400 cursor-not-allowed' : 
                      'bg-blue-600 hover:bg-blue-700'
                    }`}
                  >
                    {createCompanyMutation.isPending ? 'Création en cours...' : 'Créer l'entreprise'}
                  </Button>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
        
        {/* Helper Text */}
        {step < 5 && (
          <Alert className="mt-6 bg-blue-50 border-blue-200 text-blue-800">
            <div className="flex">
              <HelpCircle className="h-5 w-5 mr-2 text-blue-500 shrink-0" />
              <AlertDescription>
                <strong>Conseil :</strong> Les champs marqués d'un astérisque (*) sont obligatoires. 
                Les autres informations peuvent être complétées ultérieurement mais enrichiront 
                l'analyse stratégique selon la méthode Diabolo.
              </AlertDescription>
            </div>
          </Alert>
        )}
      </main>
      
      {/* Footer */}
      <footer className="bg-white border-t border-slate-200 py-4 mt-auto">
        <div className="container mx-auto px-6 flex justify-between items-center">
          <div className="text-sm text-slate-500">© CPA France 2025. Tous droits réservés.</div>
          <div className="text-sm text-slate-500">Version 1.0.0</div>
        </div>
      </footer>
    </div>
  );
};

export default CreateCompanyPage;name"
                      name="name"
                      value={formData.name}
                      onChange={handleInputChange}
                      placeholder="Ex: RAG Solutions, Bonduelle, etc."
                      className="w-full px-4 py-2"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="legalForm" className="text-sm font-medium text-slate-700">
                      Forme juridique
                    </Label>
                    <Select 
                      value={formData.legalForm}
                      onValueChange={(value) => handleSelectChange('legalForm', value)}
                    >
                      <SelectTrigger className="w-full">
                        <SelectValue placeholder="Sélectionner une forme juridique" />
                      </SelectTrigger>
                      <SelectContent>
                        {legalForms.map(form => (
                          <SelectItem key={form} value={form}>{form}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="siren" className="text-sm font-medium text-slate-700">
                        Numéro SIREN
                      </Label>
                      <Input
                        id="siren"
                        name="siren"
                        value={formData.siren}
                        onChange={handleInputChange}
                        placeholder="Ex: 123 456 789"
                        className="w-full"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="creationDate" className="text-sm font-medium text-slate-700">
                        Date de création
                      </Label>
                      <div className="relative">
                        <Input
                          id="creationDate"
                          type="date"
                          name="creationDate"
                          value={formData.creationDate}
                          onChange={handleInputChange}
                          className="w-full pl-10"
                        />
                        <Calendar className="absolute left-3 top-2.5 h-5 w-5 text-slate-400" />
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="sector" className="text-sm font-medium text-slate-700">
                      Secteur d'activité *
                    </Label>
                    <Select 
                      value={formData.sector}
                      onValueChange={(value) => handleSelectChange('sector', value)}
                    >
                      <SelectTrigger className="w-full">
                        <SelectValue placeholder="Sélectionner un secteur" />
                      </SelectTrigger>
                      <SelectContent>
                        {sectors.map(sector => (
                          <SelectItem key={sector} value={sector}>{sector}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="size" className="text-sm font-medium text-slate-700">
                      Taille de l'entreprise *
                    </Label>
                    <Select 
                      value={formData.size}
                      onValueChange={(value) => handleSelectChange('size', value)}
                    >
                      <SelectTrigger className="w-full">
                        <SelectValue placeholder="Sélectionner une taille" />
                      </SelectTrigger>
                      <SelectContent>
                        {companySizes.map(size => (
                          <SelectItem key={size} value={size}>{size}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="description" className="text-sm font-medium text-slate-700">
                      Description de l'entreprise
                    </Label>
                    <Textarea
                      id="description"
                      name="description"
                      value={formData.description}
                      onChange={handleInputChange}
                      placeholder="Brève description des activités principales de l'entreprise..."
                      className="w-full h-24"
                    />
                  </div>
                  
                  <div className="pt-2 space-y-2">
                    <Label className="text-sm font-medium text-slate-700">
                      Logo de l'entreprise
                    </Label>
                    <div className="mt-1 flex items-center">
                      {tempLogo || formData.logo ? (
                        <div className="relative h-32 w-32 rounded-lg border border-slate-300 overflow-hidden bg-slate-50">
                          <img 
                            src={tempLogo ? URL.createObjectURL(tempLogo) : formData.logo || ''}
                            alt="Logo preview" 
                            className="h-full w-full object-contain"
                          />
                          <Button 
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              setTempLogo(null);
                              setFormData({ ...formData, logo: null });
                            }}
                            className="absolute top-1 right-1 bg-white rounded-full p-1 shadow-sm hover:bg-slate-100"
                          >
                            <X className="h-4 w-4 text-slate-500" />
                          </Button>
                        </div>
                      ) : (
                        <Label htmlFor="logo-upload" className="flex flex-col items-center justify-center h-32 w-32 rounded-lg border-2 border-dashed border-slate-300 cursor-pointer hover:bg-slate-50 transition-colors">
                          <div className="flex flex-col items-center justify-center pt-5 pb-6">
                            <Upload className="h-8 w-8 text-slate-400 mb-2" />
                            <p className="text-xs text-slate-500">Cliquez pour ajouter</p>
                          </div>
                          <input 
                            id="logo-upload"
                            type="file" 
                            className="hidden" 
                            accept="image/*"
                            onChange={(e) => handleFileUpload(e, 'logo')}
                            disabled={isUploading}
                          />
                        </Label>
                      )}
                    </div>
                  </div>
                </div>
              )}
              
              {/* Step 2: Location and Contact */}
              {step === 2 && (
                <div className="space-y-6">
                  <h2 className="text-xl text-slate-800 font-medium mb-6 flex items-center">
                    <MapPin className="h-5 w-5 mr-2 text-blue-600" />
                    Localisation et contact
                  </h2>
                  
                  <div className="space-y-2">
                    <Label htmlFor="address" className="text-sm font-medium text-slate-700">
                      Adresse complète *
                    </Label>
                    <Input
                      id="address"
                      name="address"
                      value={formData.address}
                      onChange={handleInputChange}
                      placeholder="Numéro et nom de rue"
                      className="w-full"
                    />
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="postalCode" className="text-sm font-medium text-slate-700">
                        Code postal *
                      </Label>
                      <Input
                        id="postalCode"
                        name="postalCode"
                        value={formData.postalCode}
                        onChange={handleInputChange}
                        placeholder="Ex: 75001"
                        className="w-full"
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="city" className="text-sm font-medium text-slate-700">
                        Ville *
                      </Label>
                      <Input
                        id="city"
                        name="city"
                        value={formData.city}
                        onChange={handleInputChange}
                        placeholder="Ex: Paris"
                        className="w-full"
                      />
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="country" className="text-sm font-medium text-slate-700">
                      Pays
                    </Label>
                    <Input
                      id="country"
                      name="country"
                      value={formData.country}
                      onChange={handleInputChange}
                      placeholder="Ex: France"
                      className="w-full"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="website" className="text-sm font-medium text-slate-700">
                      Site web
                    </Label>
                    <div className="relative">
                      <Input
                        id="website"
                        type="url"
                        name="website"
                        value={formData.website}
                        onChange={handleInputChange}
                        placeholder="Ex: https://www.entreprise.fr"
                        className="w-full pl-10"
                      />
                      <Link className="absolute left-3 top-2.5 h-5 w-5 text-slate-400" />
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="phone" className="text-sm font-medium text-slate-700">
                        Téléphone de contact
                      </Label>
                      <div className="relative">
                        <Input
                          id="phone"
                          type="tel"
                          name="phone"
                          value={formData.phone}
                          onChange={handleInputChange}
                          placeholder="Ex: +33 1 23 45 67 89"
                          className="w-full pl-10"
                        />
                        <Phone className="absolute left-3 top-2.5 h-5 w-5 text-slate-400" />
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="email" className="text-sm font-medium text-slate-700">
                        Email de contact
                      </Label>
                      <div className="relative">
                        <Input
                          id="email"
                          type="email"
                          name="email"
                          value={formData.email}
                          onChange={handleInputChange}
                          placeholder="Ex: contact@entreprise.fr"
                          className="w-full pl-10"
                        />
                        <Mail className="absolute left-3 top-2.5 h-5 w-5 text-slate-400" />
                      </div>
                    </div>
                  </div>
                </div>
              )}
              
              {/* Step 3: Company Details */}
              {step === 3 && (
                <div className="space-y-6">
                  <h2 className="text-xl text-slate-800 font-medium mb-6 flex items-center">
                    <FileText className="h-5 w-5 mr-2 text-blue-600" />
                    Présentation détaillée
                  </h2>
                  
                  <p className="text-slate-600 text-sm">
                    Ces informations permettront d'enrichir l'analyse stratégique et sont particulièrement utiles pour la méthode Diabolo (sections VER).
                  </p>
                  
                  <div className="space-y-2">
                    <Label htmlFor="history" className="text-sm font-medium text-slate-700">
                      Historique de l'entreprise
                    </Label>
                    <Textarea
                      id="history"
                      name="history"
                      value={formData.history}
                      onChange={handleInputChange}
                      placeholder="Dates clés, évolutions majeures, rachats ou fusions..."
                      className="w-full h-24"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="mainProducts" className="text-sm font-medium text-slate-700">
                      Principaux produits/services
                    </Label>
                    <Textarea
                      id="