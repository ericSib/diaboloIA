import boto3
import json
from typing import Dict, List, Optional
from ...core.config import get_settings
from ...models.analysis import AISuggestion

settings = get_settings()

class BedrockService:
    def __init__(self):
        self.client = boto3.client(
            service_name='bedrock-runtime',
            region_name=settings.AWS_REGION,
            aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
            aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY
        )
        self.model_id = "anthropic.claude-v2"

    async def generate_suggestions(
        self,
        context: str,
        step_type: str,
        previous_steps: Optional[Dict] = None
    ) -> List[AISuggestion]:
        prompt = self._build_prompt(context, step_type, previous_steps)
        
        try:
            response = self.client.invoke_model(
                modelId=self.model_id,
                body=json.dumps({
                    "prompt": prompt,
                    "max_tokens": 1000,
                    "temperature": 0.7,
                    "top_p": 0.95,
                })
            )
            
            response_body = json.loads(response['body'].read())
            suggestions = self._parse_response(response_body)
            return suggestions
            
        except Exception as e:
            print(f"Error generating suggestions: {str(e)}")
            return []

    def _build_prompt(
        self,
        context: str,
        step_type: str,
        previous_steps: Optional[Dict] = None
    ) -> str:
        base_prompt = f"""En tant qu'assistant stratégique utilisant la méthode Diabolo, 
        analysez le contexte suivant et fournissez des suggestions pertinentes pour l'étape {step_type}.

        Contexte de l'entreprise :
        {context}
        """

        if previous_steps:
            base_prompt += "\nÉtapes précédentes :\n"
            for step, content in previous_steps.items():
                base_prompt += f"\n{step}: {content}\n"

        step_prompts = {
            "context": "Identifiez les éléments clés du contexte et les tendances importantes.",
            "strategic_issues": "Quels sont les enjeux stratégiques majeurs à considérer ?",
            "objectives": "Proposez des objectifs stratégiques SMART.",
            "actions": "Suggérez des actions concrètes pour atteindre les objectifs."
        }

        return base_prompt + "\n" + step_prompts.get(step_type, "")

    def _parse_response(self, response: Dict) -> List[AISuggestion]:
        # Implémentez la logique de parsing selon le format de réponse de Claude
        suggestions = []
        try:
            # Parse the response and create AISuggestion objects
            content = response.get('content', '')
            if content:
                suggestions.append(
                    AISuggestion(
                        content=content,
                        confidence=0.85,  # You might want to adjust this based on the response
                        context="Generated by Claude"
                    )
                )
        except Exception as e:
            print(f"Error parsing response: {str(e)}")
        
        return suggestions
